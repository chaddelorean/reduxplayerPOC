!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t,r){"use strict";r.r(t),r.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),r.d(t,"applyMiddleware",(function(){return b})),r.d(t,"bindActionCreators",(function(){return d})),r.d(t,"combineReducers",(function(){return s})),r.d(t,"compose",(function(){return h})),r.d(t,"createStore",(function(){return c}));var n=r(1),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t,r){var o;if("function"==typeof t&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,s=t,l=[],d=l,p=!1;function f(){d===l&&(d=l.slice())}function y(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function h(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return f(),d.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,f();var r=d.indexOf(e);d.splice(r,1),l=null}}}function b(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=u(s,e)}finally{p=!1}for(var t=l=d,r=0;r<t.length;r++){(0,t[r])()}return e}function m(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,b({type:i.REPLACE})}function w(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function r(){e.next&&e.next(y())}return r(),{unsubscribe:t(r)}}})[n.a]=function(){return this},e}return b({type:i.INIT}),(o={dispatch:b,subscribe:h,getState:y,replaceReducer:m})[n.a]=w,o}function u(e,t){var r=t&&t.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var o=t[n];0,"function"==typeof e[o]&&(r[o]=e[o])}var a,c=Object.keys(r);try{!function(e){Object.keys(e).forEach((function(t){var r=e[t];if(void 0===r(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var n=!1,o={},i=0;i<c.length;i++){var s=c[i],l=r[s],d=e[s],p=l(d,t);if(void 0===p){var f=u(s,t);throw new Error(f)}o[s]=p,n=n||p!==d}return(n=n||c.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function d(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var r={};for(var n in e){var o=e[n];"function"==typeof o&&(r[n]=l(o,t))}return r}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function f(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r}function y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?f(r,!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):f(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function b(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return function(){var r=e.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return y({},r,{dispatch:n=h.apply(void 0,i)(r.dispatch)})}}}},function(e,t,r){"use strict";(function(e,n){var o,i=r(2);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:n;var a=Object(i.a)(o);t.a=a}).call(this,r(4),r(5)(e))},function(e,t,r){"use strict";function n(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}r.d(t,"a",(function(){return n}))},function(e,t,r){"use strict";var n=r(0).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?n:n.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,r){"use strict";r.r(t);const n="PLAYING",o="STOPPED",i="PAUSED",a="SEEKING",c="STALLED",u="ENDED",s="TIME_UPDATE",l="ABSOLUTE_TIME_UPDATE",d="SET_BEACON",p="CLEAR_BEACONS",f="PLAY_STATE",y="PAUSE_STATE",h="STALLED_STATE",b="SEEKING_STATE",m="STOPPED_STATE",w="NEXT_CLIP",v="PREV_CLIP",E="SWITCH_CLIP",g="CLIPLIST_UPDATE",T="CLIP_ENDED",O="SET_TIME_SHIFTABLE",S="defaultImpression",_="firstQuartile",I="midway",P="thirdQuartile",j="complete",x=e=>({type:l,payload:e}),A=e=>({type:d,payload:e}),L=e=>({type:O,payload:e}),k=()=>({type:h}),N=function(e){return 1e3*e};var C=r(0);let D=Object(C.combineReducers)({playerStateReducer:(e=o,t)=>{switch(t.type){case m:e=o;break;case f:e=n;break;case y:e=i;break;case h:e=c;break;case b:e=a;break;case T:e=u}return e},clipListReducer:(e={clipList:[],currentClipIndex:0},t)=>{switch(t.type){case w:e.currentClipIndex++;break;case v:e.currentClipIndex--;break;case E:e.currentClipIndex=t.clipIndex;break;case g:e=t.assetClipList}return e}});var R=r(3);const B=Object(R.composeWithDevTools)({realtime:!0}),U=Object(C.createStore)((e={apjsTime:0,playerTime:0,beacons:[],timeShiftable:!0},t)=>{switch(t.type){case s:e.apjsTime+=t.msIncrement,e.playerTime=t.playerTime;break;case l:e.apjsTime=t.payload,e.playerTime=t.payload;break;case d:let r=e.beacons.findIndex(e=>e.type===t.payload.type&&e.timeIndex===t.payload.timeIndex);-1!==r?e.beacons.splice(r,t.payload):e.beacons.push(t.payload);break;case p:e.beacons=[];break;case O:e.timeShiftable=t.payload}return e},B()),M=Object(C.createStore)(D,B());var X=[S,_,I,P,j];var F=function(){let e=function(){let e=U.getState().apjsTime,t=U.getState().beacons,r=t.filter(e=>!e.isFired);r&&Array.isArray(r)&&r.length>0&&r[0].timeIndex<=e&&(r[0].isFired=!0,U.dispatch(A(r[0])),U.dispatch(L(!1)),console.log("Beacon event fired: ",r[0]));let n=U.getState().timeShiftable,o=t.filter(e=>e.isFired);o&&Array.isArray(o)&&o.length>0&&!n&&o[o.length-1].timeIndex+15e3<=e&&U.dispatch(L(!0))};return{processBeacons:function(e){X.map(t=>{let r=0;switch(t){case S:r=0;break;case _:r=.25*e;break;case I:r=e/2;break;case P:r=.75*e;break;case j:r=e}let n={type:t,timeIndex:N(r),isFired:!1};U.dispatch(A(n))})},watchBeaconTimeline:function(){U.subscribe(e)}}}(),V=[{url:"https://media.w3.org/2010/05/sintel/trailer.mp4"},{url:"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"},{url:"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"}];let W,K;function Y(e){let t=M.getState();if(t.clipListReducer){let r=t.clipListReducer.clipList,n=t.clipListReducer.currentClipIndex||0,o=document.createElement("source");o.type="video/mp4",o.src=r[n].url,e.innerHTML="",e.appendChild(o),n>0&&e.load()}}function G(){let e=U.getState().apjsTime,t=e/1e3;let r=U.getState().playerTime;e%1e3==0&&0!==e&&console.log(`1 second interval happened! APJSTime: ${e} ms PlayerTime: ${r} sec`),t%30==0&&0!==e&&console.log(`30 second interval happened! APJSTime: ${t} sec PlayerTime: ${r} sec`),t%60==0&&0!==e&&console.log(`1 minute interval happened! APJSTime: ${t} sec PlayerTime: ${r} sec`),t%300==0&&0!==e&&console.log(`5 minute interval happened! APJSTime: ${t} sec PlayerTime: ${r} sec`)}$((function(){W=document.getElementById("sampleVideoPlayer"),W.onplay=()=>{F.processBeacons(W.duration),M.dispatch({type:f}),K=window.setInterval(()=>{let e=U.getState().playerTime,t=W.currentTime,r=M.getState().playerState;t-e>1e4&&r!==c&&(console.error("Stall detected"),M.dispatch(k())),U.dispatch({type:s,msIncrement:100,playerTime:t})},100)},W.onpause=()=>{M.dispatch({type:y}),clearInterval(K)},W.onstalled=()=>{M.dispatch(k())},W.onseeking=()=>{M.dispatch({type:b})},W.onseeked=e=>{var t;U.dispatch(x((t=N(W.currentTime),100*Math.ceil(t/100))))},W.onended=()=>{M.dispatch({type:T});let e=M.getState();if(e){(e.clipListReducer.currentClipIndex||0)+1<e.clipListReducer.clipList.length&&(U.dispatch(x(0)),U.dispatch({type:p}),M.dispatch({type:w}),Y(W))}},W.onloadeddata=()=>{(M.getState().clipListReducer.currentClipIndex||0)>0&&W.play()},M.dispatch({type:g,assetClipList:{clipList:V,currentClipIndex:0}}),Y(W),U.subscribe(G),F.watchBeaconTimeline()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,