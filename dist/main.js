!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t,r){"use strict";r.r(t),r.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),r.d(t,"applyMiddleware",(function(){return b})),r.d(t,"bindActionCreators",(function(){return d})),r.d(t,"combineReducers",(function(){return s})),r.d(t,"compose",(function(){return h})),r.d(t,"createStore",(function(){return c}));var n=r(1),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t,r){var o;if("function"==typeof t&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,s=t,l=[],d=l,p=!1;function f(){d===l&&(d=l.slice())}function y(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function h(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return f(),d.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,f();var r=d.indexOf(e);d.splice(r,1),l=null}}}function b(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=u(s,e)}finally{p=!1}for(var t=l=d,r=0;r<t.length;r++){(0,t[r])()}return e}function m(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,b({type:i.REPLACE})}function w(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function r(){e.next&&e.next(y())}return r(),{unsubscribe:t(r)}}})[n.a]=function(){return this},e}return b({type:i.INIT}),(o={dispatch:b,subscribe:h,getState:y,replaceReducer:m})[n.a]=w,o}function u(e,t){var r=t&&t.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var o=t[n];0,"function"==typeof e[o]&&(r[o]=e[o])}var a,c=Object.keys(r);try{!function(e){Object.keys(e).forEach((function(t){var r=e[t];if(void 0===r(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var n=!1,o={},i=0;i<c.length;i++){var s=c[i],l=r[s],d=e[s],p=l(d,t);if(void 0===p){var f=u(s,t);throw new Error(f)}o[s]=p,n=n||p!==d}return(n=n||c.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function d(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var r={};for(var n in e){var o=e[n];"function"==typeof o&&(r[n]=l(o,t))}return r}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function f(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r}function y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?f(r,!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):f(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function b(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return function(){var r=e.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return y({},r,{dispatch:n=h.apply(void 0,i)(r.dispatch)})}}}},function(e,t,r){"use strict";(function(e,n){var o,i=r(2);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:n;var a=Object(i.a)(o);t.a=a}).call(this,r(4),r(5)(e))},function(e,t,r){"use strict";function n(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}r.d(t,"a",(function(){return n}))},function(e,t,r){"use strict";var n=r(0).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?n:n.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,r){"use strict";r.r(t);const n="PLAYING",o="STOPPED",i="PAUSED",a="SEEKING",c="STALLED",u="ENDED",s="TIME_UPDATE",l="ABSOLUTE_TIME_UPDATE",d="SET_BEACON",p="CLEAR_BEACONS",f="PLAY_STATE",y="PAUSE_STATE",h="STALLED_STATE",b="SEEKING_STATE",m="STOPPED_STATE",w="NEXT_CLIP",v="PREV_CLIP",E="SWITCH_CLIP",T="CLIPLIST_UPDATE",O="CLIP_ENDED",g=e=>({type:l,payLoad:e}),S=()=>({type:h}),_=function(e){return 1e3*e};var P=r(0);let I=Object(P.combineReducers)({playerStateReducer:(e=o,t)=>{switch(t.type){case m:e=o;break;case f:e=n;break;case y:e=i;break;case h:e=c;break;case b:e=a;break;case O:e=u}return e},clipListReducer:(e={clipList:[],currentClipIndex:0},t)=>{switch(t.type){case w:e.currentClipIndex++;break;case v:e.currentClipIndex--;break;case E:e.currentClipIndex=t.clipIndex;break;case T:e=t.assetClipList}return e}});var j=r(3);const L=Object(j.composeWithDevTools)({realtime:!0}),x=Object(P.createStore)((e={apjsTime:0,playerTime:0,beacons:[]},t)=>{switch(t.type){case s:e.apjsTime+=t.msIncrement,e.playerTime=t.playerTime;break;case l:e.apjsTime=t.payLoad,e.playerTime=t.payLoad;break;case d:let r=e.beacons.findIndex(e=>e.type===t.payLoad.type&&e.timeIndex===t.payLoad.timeIndex);-1!==r?e.beacons.splice(r,t.payLoad):e.beacons.push(t.payLoad);break;case p:e.beacons=[]}return e},L()),A=Object(P.createStore)(I,L());var N=["defaultImpression","firstQuartile","midway","thirdQuartile","complete"],k=[{url:"https://media.w3.org/2010/05/sintel/trailer.mp4"},{url:"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"},{url:"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"}];let C,D;function R(e){let t=A.getState();if(t.clipListReducer){let r=t.clipListReducer.currentClipIndex||0,n=t.clipListReducer.clipList,o=document.createElement("source");o.type="video/mp4",o.src=n[r].url,e.innerHTML="",e.appendChild(o),r>0&&(e.load(),setTimeout(()=>{e.play()},1e3))}}function U(){let e=x.getState().apjsTime,t=e/1e3,r=x.getState().playerTime;e%1e3==0&&0!==e&&console.log(`1 second interval happened! APJSTime: ${e} ms PlayerTime: ${r} sec`),t%30==0&&0!==e&&console.log(`30 second interval happened! APJSTime: ${t} sec PlayerTime: ${r} sec`),t%60==0&&0!==e&&console.log(`1 minute interval happened! APJSTime: ${t} sec PlayerTime: ${r} sec`),t%300==0&&0!==e&&console.log(`5 minute interval happened! APJSTime: ${t} sec PlayerTime: ${r} sec`)}$((function(){C=document.getElementById("sampleVideoPlayer"),C.onplay=()=>{!function(){let e=C.duration;N.map(t=>{let r=0;switch(t){case"defaultImpression":r=0;break;case"firstQuartile":r=.25*e;break;case"midway":r=e/2;break;case"thirdQuartile":r=.75*e;break;case"complete":r=e}let n={type:t,timeIndex:_(r),isFired:!1};x.dispatch((e=>({type:d,payLoad:e}))(n))})}(),A.dispatch({type:f}),D=window.setInterval(()=>{let e=x.getState().playerTime,t=C.currentTime,r=A.getState().playerState;t-e>1e4&&r!==c&&(console.error("Stall detected"),A.dispatch(S())),x.dispatch({type:s,msIncrement:100,playerTime:t})},100)},C.onpause=()=>{A.dispatch({type:y}),clearInterval(D)},C.onstalled=()=>{A.dispatch(S())},C.onseeking=()=>{A.dispatch({type:b})},C.onseeked=e=>{var t;x.dispatch(g((t=_(C.currentTime),100*Math.ceil(t/100))))},C.onended=()=>{A.dispatch({type:O});let e=A.getState();if(e){(e.clipListReducer.currentClipIndex||0)+1<e.clipListReducer.clipList.length&&(x.dispatch(g(0)),x.dispatch({type:p}),A.dispatch({type:w}),R(C))}},A.dispatch({type:T,assetClipList:{clipList:k,currentClipIndex:0}}),R(C),x.subscribe(U)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWRldnRvb2xzLWV4dGVuc2lvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHlwZXMvcGxheWVyRW51bXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3R5cGVzL2JlYWNvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3R5cGVzL2NsaXBMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwic3BsaXQiLCJqb2luIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsIm9iaiIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJhcmd1bWVudHMiLCJFcnJvciIsInVuZGVmaW5lZCIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInNsaWNlIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsInB1c2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkaXNwYXRjaCIsImFjdGlvbiIsInR5cGUiLCJsaXN0ZW5lcnMiLCJsZW5ndGgiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib2JzZXJ2YWJsZSIsIl9yZWYiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwiVHlwZUVycm9yIiwib2JzZXJ2ZVN0YXRlIiwibmV4dCIsInVuc3Vic2NyaWJlIiwidGhpcyIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJrZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiZm9yRWFjaCIsImFzc2VydFJlZHVjZXJTaGFwZSIsImUiLCJzdGF0ZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYXBwbHkiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQyIiwidGFyZ2V0Iiwic291cmNlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiQXJyYXkiLCJhcmciLCJyZWR1Y2UiLCJhIiwiYiIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtYXAiLCJtaWRkbGV3YXJlIiwicm9vdCIsInNlbGYiLCJ3aW5kb3ciLCJnbG9iYWwiLCJyZXN1bHQiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJjb21wb3NlV2l0aERldlRvb2xzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiZGV2VG9vbHNFbmhhbmNlciIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJub29wIiwiZyIsIkZ1bmN0aW9uIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJjaGlsZHJlbiIsInBsYXllckVudW1zIiwicGxheWVyQWN0aW9ucyIsInNldEFib3NsdXRlVGltZWxpbmUiLCJuZXdUaW1lIiwicGF5TG9hZCIsInN0YWxsZWRTdGF0ZSIsImNvbnZlcnRUb01pbGxpc2Vjb25kcyIsInRpbWUiLCJhcEpTUmVkdWNlcnMiLCJwbGF5ZXJTdGF0ZVJlZHVjZXIiLCJwbGF5ZXJTdGF0ZSIsImNsaXBMaXN0UmVkdWNlciIsImFzc2V0Q2xpcExpc3QiLCJjbGlwTGlzdCIsImN1cnJlbnRDbGlwSW5kZXgiLCJjbGlwSW5kZXgiLCJjb21wb3NlRW5oYW5jZXJzIiwicmVhbHRpbWUiLCJ0aW1lbGluZVN0b3JlIiwidGltZU9iamVjdCIsImFwanNUaW1lIiwicGxheWVyVGltZSIsImJlYWNvbnMiLCJtc0luY3JlbWVudCIsImZpbmRJbmRleCIsImJlYWNvbiIsInRpbWVJbmRleCIsImFwanNTdG9yZSIsInVybCIsInRpbWVsaW5lSW50ZXJ2YWwiLCJsb2FkVmlkZW9TcmMiLCJzYW1wbGVWaWRlb1BsYXllciIsImFwanNTdG9yZVN0YXRlIiwiY2xpcExpc3RGcm9tU3RvcmUiLCJzb3VyY2VFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJsb2FkIiwic2V0VGltZW91dCIsInBsYXkiLCJvblRpbWVVcGRhdGUiLCJjdXJyZW50QVBKU1RpbWVNUyIsImN1cnJlbnRBUEpTVGltZVNlY29uZHMiLCJjdXJyZW50UGxheWVyVGltZSIsImNvbnNvbGUiLCJsb2ciLCIkIiwiZ2V0RWxlbWVudEJ5SWQiLCJvbnBsYXkiLCJhc3NldER1cmF0aW9uIiwiZHVyYXRpb24iLCJiZWFjb25UeXBlIiwiaXNGaXJlZCIsInNldEJlYWNvbiIsInByb2Nlc3NCZWFjb25zIiwic2V0SW50ZXJ2YWwiLCJwcmV2UGxheWVyVGltZSIsImN1cnJlbnRUaW1lIiwiY3VycmVudFBsYXllclN0YXRlIiwiZXJyb3IiLCJvbnBhdXNlIiwiY2xlYXJJbnRlcnZhbCIsIm9uc3RhbGxlZCIsIm9uc2Vla2luZyIsIm9uc2Vla2VkIiwiZXZlbnQiLCJjZWlsIiwib25lbmRl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V0FBVzJHLFlBQ3pDb0MsRUFBb0JhLEVBbkdQLEtBbUc4Q0UsSUFBdUI3RCxJQUNuRitDLFFBQVFlLE1BQU0sa0JBQ2RuQyxFQUFVcEgsU0FBUzhGLE1BRXZCYSxFQUFjM0csU043RzBCLENBQzVDRSxLQUFNd0YsRUFDTnNCLFlNR2lCLElORmpCRixXTTBHb0R5QixLQXhHbkMsTUFZakIsRUFBa0JpQixRQUFVLEtBQ3hCcEMsRUFBVXBILFNOTU8sQ0FDckJFLEtBQU13RixJTU5GK0QsY0FBY25DLElBRWxCLEVBQWtCb0MsVUFBWSxLQUMxQnRDLEVBQVVwSCxTQUFTOEYsTUFFdkIsRUFBa0I2RCxVQUFZLEtBQzFCdkMsRUFBVXBILFNOV1MsQ0FDdkJFLEtBQU13RixLTVZOLEVBQWtCa0UsU0FBWUMsSUw3QlAsSUFBUy9DLEVLOEI1QkgsRUFBYzNHLFNBQVMyRixHTDlCS21CLEVLOEJrQ2YsRUFBc0IsRUFBa0JzRCxhTDdCdkUsSUFBNUIxTCxLQUFLbU0sS0FBS2hELEVBQVcsU0srQjVCLEVBQWtCaUQsUUFBVSxLQUN4QjNDLEVBQVVwSCxTTnNCTSxDQUNwQkUsS0FBTXdGLElNdEJGLElBQUkrQixFQUFpQkwsRUFBVTVILFdBQy9CLEdBQUlpSSxFQUFnQixFQUNPQSxFQUFlckIsZ0JBQWdCRyxrQkFBb0IsR0FFbkQsRUFEQ2tCLEVBQWVyQixnQkFBZ0JFLFNBQ1ZsRyxTQUN6Q3VHLEVBQWMzRyxTQUFTMkYsRUFBb0IsSUFDM0NnQixFQUFjM0csU050QkgsQ0FDdkJFLEtBQU13RixJTXNCTTBCLEVBQVVwSCxTTkNILENBQ25CRSxLQUFNd0YsSU1ETTZCLEVBQWEsTUFLekJILEVBQVVwSCxTTll5QyxDQUNuREUsS0FBTXdGLEVBQ05XLGNBQWUsQ0FDWEMsU01mOEIsRU5nQjlCQyxpQk1oQndDLEtBQzVDZ0IsRUFBYSxHQUNiWixFQUFjbEgsVUFBVTJJIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNik7XG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjb21wb3NlID0gcmVxdWlyZSgncmVkdXgnKS5jb21wb3NlO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jb21wb3NlV2l0aERldlRvb2xzID0gKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID9cbiAgICB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDpcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSByZXR1cm4gY29tcG9zZTtcbiAgICAgIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuKTtcblxuZXhwb3J0cy5kZXZUb29sc0VuaGFuY2VyID0gKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA/XG4gICAgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gOlxuICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gZnVuY3Rpb24obm9vcCkgeyByZXR1cm4gbm9vcDsgfSB9XG4pO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImNvbnN0IHBsYXllckVudW1zID0ge1xuICAgIFBMQVlJTkc6IFwiUExBWUlOR1wiLFxuICAgIFNUT1BQRUQ6IFwiU1RPUFBFRFwiLFxuICAgIFBBVVNFRDogXCJQQVVTRURcIixcbiAgICBTRUVLSU5HOiBcIlNFRUtJTkdcIixcbiAgICBTVEFMTEVEOiBcIlNUQUxMRURcIixcbiAgICBFTkRFRDogXCJFTkRFRFwiXG59XG5cbmNvbnN0IHBsYXllckFjdGlvbnMgPSB7XG4gICAgVElNRV9VUERBVEU6IFwiVElNRV9VUERBVEVcIixcbiAgICBBQlNPTFVURV9USU1FX1VQREFURTogXCJBQlNPTFVURV9USU1FX1VQREFURVwiLFxuICAgIFNFVF9CRUFDT046IFwiU0VUX0JFQUNPTlwiLFxuICAgIENMRUFSX0JFQUNPTlM6IFwiQ0xFQVJfQkVBQ09OU1wiLFxuICAgIFBMQVlfU1RBVEU6IFwiUExBWV9TVEFURVwiLFxuICAgIFBBVVNFX1NUQVRFOiBcIlBBVVNFX1NUQVRFXCIsXG4gICAgU1RBTExFRF9TVEFURTogXCJTVEFMTEVEX1NUQVRFXCIsXG4gICAgU0VFS0lOR19TVEFURTogXCJTRUVLSU5HX1NUQVRFXCIsXG4gICAgU1RPUFBFRF9TVEFURTogXCJTVE9QUEVEX1NUQVRFXCIsXG4gICAgTkVYVF9DTElQOiBcIk5FWFRfQ0xJUFwiLFxuICAgIFBSRVZfQ0xJUDogXCJQUkVWX0NMSVBcIixcbiAgICBTV0lUQ0hfQ0xJUDogXCJTV0lUQ0hfQ0xJUFwiLFxuICAgIENMSVBMSVNUX1VQREFURTogXCJDTElQTElTVF9VUERBVEVcIixcbiAgICBDTElQX0VOREVEOiBcIkNMSVBfRU5ERURcIlxufVxuXG5leHBvcnQge1xuICAgIHBsYXllckVudW1zLFxuICAgIHBsYXllckFjdGlvbnNcbn0iLCJpbXBvcnQgeyBwbGF5ZXJBY3Rpb25zIH0gZnJvbSAnLi4vdHlwZXMvcGxheWVyRW51bXMnO1xuXG5jb25zdCB0aW1lVXBkYXRlID0gKG1zSW5jcmVtZW50LCBwbGF5ZXJUaW1lKSA9PiAoe1xuICAgIHR5cGU6IHBsYXllckFjdGlvbnMuVElNRV9VUERBVEUsXG4gICAgbXNJbmNyZW1lbnQsXG4gICAgcGxheWVyVGltZVxufSk7XG5cbmNvbnN0IHNldEFib3NsdXRlVGltZWxpbmUgPSAobmV3VGltZSkgPT4gKHtcbiAgICB0eXBlOiBwbGF5ZXJBY3Rpb25zLkFCU09MVVRFX1RJTUVfVVBEQVRFLFxuICAgIHBheUxvYWQ6IG5ld1RpbWVcbn0pO1xuXG5jb25zdCBzZXRCZWFjb24gPSAoYmVhY29uKSA9PiAoe1xuICAgIHR5cGU6IHBsYXllckFjdGlvbnMuU0VUX0JFQUNPTixcbiAgICBwYXlMb2FkOiBiZWFjb25cbn0pO1xuXG5jb25zdCBjbGVhckJlYWNvbnMgPSAoKSA9PiAoe1xuICAgIHR5cGU6IHBsYXllckFjdGlvbnMuQ0xFQVJfQkVBQ09OU1xufSk7XG5cbmNvbnN0IHBsYXlTdGF0ZSA9ICgpID0+ICh7XG4gICAgdHlwZTogcGxheWVyQWN0aW9ucy5QTEFZX1NUQVRFXG59KTtcblxuY29uc3QgcGF1c2VTdGF0ZSA9ICgpID0+ICh7XG4gICAgdHlwZTogcGxheWVyQWN0aW9ucy5QQVVTRV9TVEFURVxufSk7XG5cbmNvbnN0IHN0YWxsZWRTdGF0ZSA9ICgpID0+ICh7XG4gICAgdHlwZTogcGxheWVyQWN0aW9ucy5TVEFMTEVEX1NUQVRFXG59KTtcblxuY29uc3Qgc3RvcHBlZFN0YXRlID0gKCkgPT4gKHtcbiAgICB0eXBlOiBwbGF5ZXJBY3Rpb25zLlNUT1BQRURfU1RBVEVcbn0pO1xuXG5jb25zdCBzZWVraW5nU3RhdGUgPSAoKSA9PiAoe1xuICAgIHR5cGU6IHBsYXllckFjdGlvbnMuU0VFS0lOR19TVEFURVxufSk7XG5cbmNvbnN0IG5leHRDbGlwID0gKCkgPT4gKHtcbiAgICB0eXBlOiBwbGF5ZXJBY3Rpb25zLk5FWFRfQ0xJUFxufSk7XG5cbmNvbnN0IHByZXZDbGlwID0gKCkgPT4gKHtcbiAgICB0eXBlOiBwbGF5ZXJBY3Rpb25zLlBSRVZfQ0xJUFxufSk7XG5cbmNvbnN0IHN3aXRjaENsaXAgPSAoY2xpcEluZGV4KSA9PiAoe1xuICAgIHR5cGU6IHBsYXllckFjdGlvbnMuU1dJVENIX0NMSVAsXG4gICAgY2xpcEluZGV4XG59KTtcblxuY29uc3QgY2xpcEVuZGVkID0gKCkgPT4gKHtcbiAgICB0eXBlOiBwbGF5ZXJBY3Rpb25zLkNMSVBfRU5ERURcbn0pXG5cbmNvbnN0IHVwZGF0ZUNsaXBMaXN0ID0gKGNsaXBMaXN0LCBjdXJyZW50Q2xpcEluZGV4KSA9PiAoe1xuICAgIHR5cGU6IHBsYXllckFjdGlvbnMuQ0xJUExJU1RfVVBEQVRFLFxuICAgIGFzc2V0Q2xpcExpc3Q6IHtcbiAgICAgICAgY2xpcExpc3QsXG4gICAgICAgIGN1cnJlbnRDbGlwSW5kZXhcbiAgICB9XG59KTtcblxuZXhwb3J0IHtcbiAgICB0aW1lVXBkYXRlLFxuICAgIHNldEFib3NsdXRlVGltZWxpbmUsXG4gICAgc2V0QmVhY29uLFxuICAgIGNsZWFyQmVhY29ucyxcbiAgICBwbGF5U3RhdGUsXG4gICAgcGF1c2VTdGF0ZSxcbiAgICBzdGFsbGVkU3RhdGUsXG4gICAgc3RvcHBlZFN0YXRlLFxuICAgIHNlZWtpbmdTdGF0ZSxcbiAgICBuZXh0Q2xpcCxcbiAgICBwcmV2Q2xpcCxcbiAgICBzd2l0Y2hDbGlwLFxuICAgIHVwZGF0ZUNsaXBMaXN0LFxuICAgIGNsaXBFbmRlZFxufSIsImNvbnN0IGdldFdob2xlUGxheWVyVGltZSA9IGZ1bmN0aW9uKHBsYXllclRpbWUpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHBsYXllclRpbWUvMTAwKSAqIDEwMDtcbn1cblxuY29uc3QgY29udmVydFRvTWlsbGlzZWNvbmRzID0gZnVuY3Rpb24odGltZSkge1xuICAgIHJldHVybiB0aW1lICogMTAwMDtcbn1cblxuZXhwb3J0IHtcbiAgICBnZXRXaG9sZVBsYXllclRpbWUsXG4gICAgY29udmVydFRvTWlsbGlzZWNvbmRzXG59IiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgcGxheWVyRW51bXMsIHBsYXllckFjdGlvbnMgfSBmcm9tICcuLi90eXBlcy9wbGF5ZXJFbnVtcy5qcydcblxuY29uc3QgdGltZWxpbmVSZWR1Y2VyID0gKHRpbWVPYmplY3QgPSB7YXBqc1RpbWU6IDAsIHBsYXllclRpbWU6IDAsIGJlYWNvbnM6IFtdfSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIHBsYXllckFjdGlvbnMuVElNRV9VUERBVEU6XG4gICAgICAgICAgICB0aW1lT2JqZWN0LmFwanNUaW1lICs9IGFjdGlvbi5tc0luY3JlbWVudDtcbiAgICAgICAgICAgIHRpbWVPYmplY3QucGxheWVyVGltZSA9IGFjdGlvbi5wbGF5ZXJUaW1lO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgcGxheWVyQWN0aW9ucy5BQlNPTFVURV9USU1FX1VQREFURTpcbiAgICAgICAgICAgIHRpbWVPYmplY3QuYXBqc1RpbWUgPSBhY3Rpb24ucGF5TG9hZDtcbiAgICAgICAgICAgIHRpbWVPYmplY3QucGxheWVyVGltZSA9IGFjdGlvbi5wYXlMb2FkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgcGxheWVyQWN0aW9ucy5TRVRfQkVBQ09OOlxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGltZU9iamVjdC5iZWFjb25zLmZpbmRJbmRleChiZWFjb24gPT4gYmVhY29uLnR5cGUgPT09IGFjdGlvbi5wYXlMb2FkLnR5cGUgJiYgYmVhY29uLnRpbWVJbmRleCA9PT0gYWN0aW9uLnBheUxvYWQudGltZUluZGV4KTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aW1lT2JqZWN0LmJlYWNvbnMuc3BsaWNlKGluZGV4LCBhY3Rpb24ucGF5TG9hZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpbWVPYmplY3QuYmVhY29ucy5wdXNoKGFjdGlvbi5wYXlMb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHBsYXllckFjdGlvbnMuQ0xFQVJfQkVBQ09OUzpcbiAgICAgICAgICAgIHRpbWVPYmplY3QuYmVhY29ucyA9IFtdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpbWVPYmplY3Q7XG59XG5cbmNvbnN0IHBsYXllclN0YXRlUmVkdWNlciA9IChwbGF5ZXJTdGF0ZSA9IHBsYXllckVudW1zLlNUT1BQRUQsIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBwbGF5ZXJBY3Rpb25zLlNUT1BQRURfU1RBVEU6XG4gICAgICAgICAgICBwbGF5ZXJTdGF0ZSA9IHBsYXllckVudW1zLlNUT1BQRUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBwbGF5ZXJBY3Rpb25zLlBMQVlfU1RBVEU6XG4gICAgICAgICAgICBwbGF5ZXJTdGF0ZSA9IHBsYXllckVudW1zLlBMQVlJTkc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBwbGF5ZXJBY3Rpb25zLlBBVVNFX1NUQVRFOlxuICAgICAgICAgICAgcGxheWVyU3RhdGUgPSBwbGF5ZXJFbnVtcy5QQVVTRUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBwbGF5ZXJBY3Rpb25zLlNUQUxMRURfU1RBVEU6XG4gICAgICAgICAgICBwbGF5ZXJTdGF0ZSA9IHBsYXllckVudW1zLlNUQUxMRUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBwbGF5ZXJBY3Rpb25zLlNFRUtJTkdfU1RBVEU6XG4gICAgICAgICAgICBwbGF5ZXJTdGF0ZSA9IHBsYXllckVudW1zLlNFRUtJTkc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBwbGF5ZXJBY3Rpb25zLkNMSVBfRU5ERUQ6XG4gICAgICAgICAgICBwbGF5ZXJTdGF0ZSA9IHBsYXllckVudW1zLkVOREVEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBwbGF5ZXJTdGF0ZVxufVxuXG5jb25zdCBjbGlwTGlzdFJlZHVjZXIgPSAoYXNzZXRDbGlwTGlzdCA9IHtjbGlwTGlzdDogW10sIGN1cnJlbnRDbGlwSW5kZXg6IDB9LCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgcGxheWVyQWN0aW9ucy5ORVhUX0NMSVA6XG4gICAgICAgICAgICBhc3NldENsaXBMaXN0LmN1cnJlbnRDbGlwSW5kZXgrKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHBsYXllckFjdGlvbnMuUFJFVl9DTElQOlxuICAgICAgICAgICAgYXNzZXRDbGlwTGlzdC5jdXJyZW50Q2xpcEluZGV4LS07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBwbGF5ZXJBY3Rpb25zLlNXSVRDSF9DTElQOlxuICAgICAgICAgICAgYXNzZXRDbGlwTGlzdC5jdXJyZW50Q2xpcEluZGV4ID0gYWN0aW9uLmNsaXBJbmRleDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHBsYXllckFjdGlvbnMuQ0xJUExJU1RfVVBEQVRFOlxuICAgICAgICAgICAgYXNzZXRDbGlwTGlzdCA9IGFjdGlvbi5hc3NldENsaXBMaXN0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzc2V0Q2xpcExpc3Q7XG59XG5cbmxldCBhcEpTUmVkdWNlcnMgPSBjb21iaW5lUmVkdWNlcnMoe1xuICAgIHBsYXllclN0YXRlUmVkdWNlcixcbiAgICBjbGlwTGlzdFJlZHVjZXJcbn0pXG5cbmV4cG9ydCB7XG4gICAgdGltZWxpbmVSZWR1Y2VyLFxuICAgIHBsYXllclN0YXRlUmVkdWNlcixcbiAgICBjbGlwTGlzdFJlZHVjZXIsXG4gICAgYXBKU1JlZHVjZXJzXG59IiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB0aW1lbGluZVJlZHVjZXIsIGFwSlNSZWR1Y2VycyB9IGZyb20gJy4uL3JlZHVjZXJzL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbXBvc2VXaXRoRGV2VG9vbHMgfSBmcm9tICdyZWR1eC1kZXZ0b29scy1leHRlbnNpb24nO1xuXG5jb25zdCBjb21wb3NlRW5oYW5jZXJzID0gY29tcG9zZVdpdGhEZXZUb29scyh7IHJlYWx0aW1lOiB0cnVlIH0pO1xuY29uc3QgdGltZWxpbmVTdG9yZSA9IGNyZWF0ZVN0b3JlKHRpbWVsaW5lUmVkdWNlciwgY29tcG9zZUVuaGFuY2VycygpKTtcbmNvbnN0IGFwanNTdG9yZSA9IGNyZWF0ZVN0b3JlKGFwSlNSZWR1Y2VycywgY29tcG9zZUVuaGFuY2VycygpKTtcblxuZXhwb3J0IHtcbiAgICB0aW1lbGluZVN0b3JlLFxuICAgIGFwanNTdG9yZVxufSIsImV4cG9ydCBkZWZhdWx0IFtcbiAgICBcImRlZmF1bHRJbXByZXNzaW9uXCIsXG4gICAgXCJmaXJzdFF1YXJ0aWxlXCIsXG4gICAgXCJtaWR3YXlcIixcbiAgICBcInRoaXJkUXVhcnRpbGVcIixcbiAgICBcImNvbXBsZXRlXCJcbl0iLCJleHBvcnQgZGVmYXVsdCBbXG4gICAge1xuICAgICAgICB1cmw6IFwiaHR0cHM6Ly9tZWRpYS53My5vcmcvMjAxMC8wNS9zaW50ZWwvdHJhaWxlci5tcDRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICB1cmw6IFwiaHR0cDovL2NvbW1vbmRhdGFzdG9yYWdlLmdvb2dsZWFwaXMuY29tL2d0di12aWRlb3MtYnVja2V0L3NhbXBsZS9CaWdCdWNrQnVubnkubXA0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdXJsOiBcImh0dHA6Ly9jb21tb25kYXRhc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9ndHYtdmlkZW9zLWJ1Y2tldC9zYW1wbGUvRWxlcGhhbnRzRHJlYW0ubXA0XCJcbiAgICB9XG5dIiwiaW1wb3J0IHsgdGltZVVwZGF0ZSwgcGxheVN0YXRlLCBwYXVzZVN0YXRlLCBzdGFsbGVkU3RhdGUsIHN0b3BwZWRTdGF0ZSwgc2Vla2luZ1N0YXRlLCBuZXh0Q2xpcCwgdXBkYXRlQ2xpcExpc3QsIGNsaXBFbmRlZCwgc2V0QWJvc2x1dGVUaW1lbGluZSwgc2V0QmVhY29uLCBjbGVhckJlYWNvbnMgfSBmcm9tICcuL2FjdGlvbnMvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2V0V2hvbGVQbGF5ZXJUaW1lLCBjb252ZXJ0VG9NaWxsaXNlY29uZHN9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgdGltZWxpbmVTdG9yZSwgYXBqc1N0b3JlIH0gZnJvbSAnLi9zdG9yZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBwbGF5ZXJFbnVtcyB9IGZyb20gJy4vdHlwZXMvcGxheWVyRW51bXMuanMnO1xuaW1wb3J0IGJlYWNvbnMgZnJvbSAnLi90eXBlcy9iZWFjb25zLmpzJztcbmltcG9ydCBDbGlwTGlzdCBmcm9tICcuL3R5cGVzL2NsaXBMaXN0LmpzJztcblxuY29uc3QgaW50ZXJ2YWxUaW1lID0gMTAwO1xuY29uc3QgU1RBTExFRF9USFJFU0hPTEQgPSAxMDAwMDtcbmxldCBzYW1wbGVWaWRlb1BsYXllcjtcbmxldCB0aW1lbGluZUludGVydmFsO1xuXG4kKGZ1bmN0aW9uKCkge1xuICAgIHNhbXBsZVZpZGVvUGxheWVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzYW1wbGVWaWRlb1BsYXllclwiKTtcbiAgICBzYW1wbGVWaWRlb1BsYXllci5vbnBsYXkgPSAoKSA9PiB7XG4gICAgICAgIHByb2Nlc3NCZWFjb25zKCk7XG4gICAgICAgIGFwanNTdG9yZS5kaXNwYXRjaChwbGF5U3RhdGUoKSk7XG4gICAgICAgIGluaXRUaW1lcigpO1xuICAgIH07XG4gICAgc2FtcGxlVmlkZW9QbGF5ZXIub25wYXVzZSA9ICgpID0+IHtcbiAgICAgICAgYXBqc1N0b3JlLmRpc3BhdGNoKHBhdXNlU3RhdGUoKSk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGltZWxpbmVJbnRlcnZhbCk7XG4gICAgfVxuICAgIHNhbXBsZVZpZGVvUGxheWVyLm9uc3RhbGxlZCA9ICgpID0+IHtcbiAgICAgICAgYXBqc1N0b3JlLmRpc3BhdGNoKHN0YWxsZWRTdGF0ZSgpKTtcbiAgICB9XG4gICAgc2FtcGxlVmlkZW9QbGF5ZXIub25zZWVraW5nID0gKCkgPT4ge1xuICAgICAgICBhcGpzU3RvcmUuZGlzcGF0Y2goc2Vla2luZ1N0YXRlKCkpO1xuICAgIH1cbiAgICBzYW1wbGVWaWRlb1BsYXllci5vbnNlZWtlZCA9IChldmVudCkgPT4ge1xuICAgICAgICB0aW1lbGluZVN0b3JlLmRpc3BhdGNoKHNldEFib3NsdXRlVGltZWxpbmUoZ2V0V2hvbGVQbGF5ZXJUaW1lKGNvbnZlcnRUb01pbGxpc2Vjb25kcyhzYW1wbGVWaWRlb1BsYXllci5jdXJyZW50VGltZSkpKSk7XG4gICAgfTtcbiAgICBzYW1wbGVWaWRlb1BsYXllci5vbmVuZGVkID0gKCkgPT4ge1xuICAgICAgICBhcGpzU3RvcmUuZGlzcGF0Y2goY2xpcEVuZGVkKCkpO1xuICAgICAgICBsZXQgYXBqc1N0b3JlU3RhdGUgPSBhcGpzU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgaWYgKGFwanNTdG9yZVN0YXRlKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudENsaXBJbmRleCA9IGFwanNTdG9yZVN0YXRlLmNsaXBMaXN0UmVkdWNlci5jdXJyZW50Q2xpcEluZGV4IHx8IDA7XG4gICAgICAgICAgICBsZXQgY2xpcExpc3RGcm9tU3RvcmUgPSBhcGpzU3RvcmVTdGF0ZS5jbGlwTGlzdFJlZHVjZXIuY2xpcExpc3Q7XG4gICAgICAgICAgICBpZiAoY3VycmVudENsaXBJbmRleCArIDEgPCBjbGlwTGlzdEZyb21TdG9yZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aW1lbGluZVN0b3JlLmRpc3BhdGNoKHNldEFib3NsdXRlVGltZWxpbmUoMCkpO1xuICAgICAgICAgICAgICAgIHRpbWVsaW5lU3RvcmUuZGlzcGF0Y2goY2xlYXJCZWFjb25zKCkpO1xuICAgICAgICAgICAgICAgIGFwanNTdG9yZS5kaXNwYXRjaChuZXh0Q2xpcCgpKTtcbiAgICAgICAgICAgICAgICBsb2FkVmlkZW9TcmMoc2FtcGxlVmlkZW9QbGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBqc1N0b3JlLmRpc3BhdGNoKHVwZGF0ZUNsaXBMaXN0KENsaXBMaXN0LCAwKSk7XG4gICAgbG9hZFZpZGVvU3JjKHNhbXBsZVZpZGVvUGxheWVyKTtcbiAgICB0aW1lbGluZVN0b3JlLnN1YnNjcmliZShvblRpbWVVcGRhdGUpO1xufSk7XG5cbmZ1bmN0aW9uIGxvYWRWaWRlb1NyYyhzYW1wbGVWaWRlb1BsYXllcikge1xuICAgIGxldCBhcGpzU3RvcmVTdGF0ZSA9IGFwanNTdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGlmIChhcGpzU3RvcmVTdGF0ZS5jbGlwTGlzdFJlZHVjZXIpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRDbGlwSW5kZXggPSBhcGpzU3RvcmVTdGF0ZS5jbGlwTGlzdFJlZHVjZXIuY3VycmVudENsaXBJbmRleCB8fCAwO1xuICAgICAgICBsZXQgY2xpcExpc3RGcm9tU3RvcmUgPSBhcGpzU3RvcmVTdGF0ZS5jbGlwTGlzdFJlZHVjZXIuY2xpcExpc3Q7XG4gICAgICAgIGxldCBzb3VyY2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNvdXJjZVwiKTtcbiAgICAgICAgc291cmNlRWxlbWVudC50eXBlID0gXCJ2aWRlby9tcDRcIjtcbiAgICAgICAgc291cmNlRWxlbWVudC5zcmMgPSBjbGlwTGlzdEZyb21TdG9yZVtjdXJyZW50Q2xpcEluZGV4XS51cmw7XG4gICAgICAgIHNhbXBsZVZpZGVvUGxheWVyLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIHNhbXBsZVZpZGVvUGxheWVyLmFwcGVuZENoaWxkKHNvdXJjZUVsZW1lbnQpO1xuICAgICAgICBpZiAoY3VycmVudENsaXBJbmRleCA+IDApIHtcbiAgICAgICAgICAgIHNhbXBsZVZpZGVvUGxheWVyLmxvYWQoKVxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2FtcGxlVmlkZW9QbGF5ZXIucGxheSgpO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NCZWFjb25zKCkge1xuICAgIGxldCBhc3NldER1cmF0aW9uID0gc2FtcGxlVmlkZW9QbGF5ZXIuZHVyYXRpb247XG4gICAgYmVhY29ucy5tYXAoYmVhY29uVHlwZSA9PiB7XG4gICAgICAgIGxldCB0aW1lSW5kZXggPSAwO1xuICAgICAgICBzd2l0Y2ggKGJlYWNvblR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0SW1wcmVzc2lvblwiOlxuICAgICAgICAgICAgICAgIHRpbWVJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZmlyc3RRdWFydGlsZVwiOlxuICAgICAgICAgICAgICAgIHRpbWVJbmRleCA9IGFzc2V0RHVyYXRpb24gKiAuMjU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWlkd2F5XCI6IFxuICAgICAgICAgICAgICAgIHRpbWVJbmRleCA9IGFzc2V0RHVyYXRpb24gLyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRoaXJkUXVhcnRpbGVcIjpcbiAgICAgICAgICAgICAgICB0aW1lSW5kZXggPSBhc3NldER1cmF0aW9uICogLjc1O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBsZXRlXCI6XG4gICAgICAgICAgICAgICAgdGltZUluZGV4ID0gYXNzZXREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBiZWFjb24gPSB7XG4gICAgICAgICAgICB0eXBlOiBiZWFjb25UeXBlLFxuICAgICAgICAgICAgdGltZUluZGV4OiBjb252ZXJ0VG9NaWxsaXNlY29uZHModGltZUluZGV4KSxcbiAgICAgICAgICAgIGlzRmlyZWQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgdGltZWxpbmVTdG9yZS5kaXNwYXRjaChzZXRCZWFjb24oYmVhY29uKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGluaXRUaW1lcigpIHtcbiAgICB0aW1lbGluZUludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgbGV0IHByZXZQbGF5ZXJUaW1lID0gdGltZWxpbmVTdG9yZS5nZXRTdGF0ZSgpLnBsYXllclRpbWU7IFxuICAgICAgICBsZXQgY3VycmVudFBsYXllclRpbWUgPSBzYW1wbGVWaWRlb1BsYXllci5jdXJyZW50VGltZTtcbiAgICAgICAgbGV0IGN1cnJlbnRQbGF5ZXJTdGF0ZSA9IGFwanNTdG9yZS5nZXRTdGF0ZSgpLnBsYXllclN0YXRlO1xuICAgICAgICBpZiAoKGN1cnJlbnRQbGF5ZXJUaW1lIC0gcHJldlBsYXllclRpbWUpID4gU1RBTExFRF9USFJFU0hPTEQgJiYgY3VycmVudFBsYXllclN0YXRlICE9PSBwbGF5ZXJFbnVtcy5TVEFMTEVEKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiU3RhbGwgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgICBhcGpzU3RvcmUuZGlzcGF0Y2goc3RhbGxlZFN0YXRlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVsaW5lU3RvcmUuZGlzcGF0Y2godGltZVVwZGF0ZShpbnRlcnZhbFRpbWUsIGN1cnJlbnRQbGF5ZXJUaW1lKSk7XG4gICAgfSwgaW50ZXJ2YWxUaW1lKTtcbn1cblxuZnVuY3Rpb24gb25UaW1lVXBkYXRlKCkge1xuICAgIGxldCBjdXJyZW50QVBKU1RpbWVNUyA9IHRpbWVsaW5lU3RvcmUuZ2V0U3RhdGUoKS5hcGpzVGltZTtcbiAgICBsZXQgY3VycmVudEFQSlNUaW1lU2Vjb25kcyA9IGN1cnJlbnRBUEpTVGltZU1TIC8gMTAwMDtcbiAgICBsZXQgY3VycmVudFBsYXllclRpbWUgPSB0aW1lbGluZVN0b3JlLmdldFN0YXRlKCkucGxheWVyVGltZTtcblxuICAgIGlmIChjdXJyZW50QVBKU1RpbWVNUyAlIDEwMDAgPT09IDAgJiYgY3VycmVudEFQSlNUaW1lTVMgIT09IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coYDEgc2Vjb25kIGludGVydmFsIGhhcHBlbmVkISBBUEpTVGltZTogJHtjdXJyZW50QVBKU1RpbWVNU30gbXMgUGxheWVyVGltZTogJHtjdXJyZW50UGxheWVyVGltZX0gc2VjYCk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRBUEpTVGltZVNlY29uZHMgJSAzMCA9PT0gMCAmJiBjdXJyZW50QVBKU1RpbWVNUyAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgMzAgc2Vjb25kIGludGVydmFsIGhhcHBlbmVkISBBUEpTVGltZTogJHtjdXJyZW50QVBKU1RpbWVTZWNvbmRzfSBzZWMgUGxheWVyVGltZTogJHtjdXJyZW50UGxheWVyVGltZX0gc2VjYCk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRBUEpTVGltZVNlY29uZHMgJSA2MCA9PT0gMCAmJiBjdXJyZW50QVBKU1RpbWVNUyAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgMSBtaW51dGUgaW50ZXJ2YWwgaGFwcGVuZWQhIEFQSlNUaW1lOiAke2N1cnJlbnRBUEpTVGltZVNlY29uZHN9IHNlYyBQbGF5ZXJUaW1lOiAke2N1cnJlbnRQbGF5ZXJUaW1lfSBzZWNgKTtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEFQSlNUaW1lU2Vjb25kcyAlIDMwMCA9PT0gMCAmJiBjdXJyZW50QVBKU1RpbWVNUyAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgNSBtaW51dGUgaW50ZXJ2YWwgaGFwcGVuZWQhIEFQSlNUaW1lOiAke2N1cnJlbnRBUEpTVGltZVNlY29uZHN9IHNlYyBQbGF5ZXJUaW1lOiAke2N1cnJlbnRQbGF5ZXJUaW1lfSBzZWNgKTtcbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==